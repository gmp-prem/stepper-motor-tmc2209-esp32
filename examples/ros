#include <Arduino.h>
#include <ros.h>
#include "SpeedyStepper.h"

#include <motoman_gripper/stepper_motor.h>
#include <std_srvs/Empty.h>

// Params
motoman_gripper::stepper_motor stepper_pub_msg;
motoman_gripper::stepper_motor stepper_sub_msg;

uint32_t previous_time = 0;

// Stepper Variable
const int MOTOR_STEP_PIN = 3;
const int MOTOR_DIRECTION_PIN = 2;

SpeedyStepper stepper;

// ROS
ros::NodeHandle nh;

//Function
void stepperHome(){
  stepper.setAccelerationInStepsPerSecondPerSecond(10000);
  stepper.setCurrentPositionInSteps(0);
  stepper.setSpeedInStepsPerSecond(2000);
  stepper.setupMoveInSteps(2500);
  while(!stepper.motionComplete())
  {
    stepper.processMovement();
  }
  stepper.setupMoveInSteps(0);
  while(!stepper.motionComplete())
  {
    stepper.processMovement();
  }
  stepper.setCurrentPositionInSteps(0);
  stepper.setupMoveInSteps(0);
}

// callbacks
void stepperMsgCallback( const motoman_gripper::stepper_motor& msg){
  stepper_sub_msg = msg;
  stepper.setSpeedInStepsPerSecond(stepper_sub_msg.speed);
  stepper.setupMoveInSteps(stepper_sub_msg.position);
}

void stepperHomeSrvCallback(const std_srvs::EmptyRequest & req, std_srvs::EmptyRequest & res){
  stepperHome();
}

ros::Subscriber<motoman_gripper::stepper_motor> stepper_sub("gripper_stepper_sub", &stepperMsgCallback);
ros::Publisher stepper_pub("gripper_stepper_pub", &stepper_pub_msg);

ros::ServiceServer<std_srvs::EmptyRequest, std_srvs::EmptyResponse> stepper_srv("gripper_stepper_home_srv", stepperHomeSrvCallback);


void setup() {
  nh.initNode();
  nh.subscribe(stepper_sub);
  nh.advertise(stepper_pub);

  nh.advertiseService(stepper_srv);

  //Init Stepper
  stepper.connectToPins(MOTOR_STEP_PIN, MOTOR_DIRECTION_PIN);
  stepper.setAccelerationInStepsPerSecondPerSecond(10000);

  stepper_sub_msg.moving = false;
  stepper_sub_msg.position = 0;
  stepper_sub_msg.speed = 0;

  //Stepper Home
  stepperHome();
}

void loop() {
  uint32_t current_time = millis();
  if((current_time - previous_time) > 100){
    previous_time = current_time;
    stepper_pub_msg.moving = !stepper.motionComplete();
    stepper_pub_msg.position = stepper.getCurrentPositionInSteps();
    stepper_pub_msg.speed = stepper_sub_msg.speed;
    stepper_pub.publish(&stepper_pub_msg);

    nh.spinOnce();
  }

  stepper.processMovement();
  //delay(1);
}