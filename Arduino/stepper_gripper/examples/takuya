#include <Arduino.h>
#include <HardwareSerial.h>
#include "ArduinoHardware.h" 

#include <ros.h>
#include <std_msgs/Float64.h>

#include <TMCStepper.h>
#include "SpeedyStepper.h"

// declare the variable
#define EN_PIN 18
#define STEP_PIN 19
#define DIR_PIN 21
#define SERIAL_PORT Serial2
#define BUILTIN_LED_PIN 13

#define DRIVER_ADDRESS 0b00 // TMC2209 Driver address according to MS1 and MS2
#define R_SENSE 0.11f       // R_SENSE for current calculation
#define STALL_VALUE 100     // For homing, [0..255] if (SG_THRS*2 > SG_RESULT) stall detected

#define BAUDRATE 115200
#define RATE 500

using namespace TMC2208_n;

// global variables
double speed_in_mm_current;
double position_in_mm_current;

// prototype functions


// TMC2209 driver
TMC2209Stepper driver(&SERIAL_PORT, R_SENSE, DRIVER_ADDRESS); // for tmc2209 driver
SpeedyStepper stepper; // for stepper motor

// ========== ROS ================
ros::NodeHandle nh;

void gripperSpeedInMMCallback(const std_msgs::Float64 &msg) {
  speed_in_mm_current = msg.data;
  stepper.setSpeedInMillimetersPerSecond(speed_in_mm_current);
}

void gripperPositionInMMCallback(const std_msgs::Float64 &msg){
  position_in_mm_current = msg.data;
  stepper.moveToPositionInMillimeters(position_in_mm_current);
}

ros::Subscriber<std_msgs::Float64> gripper_speed_in_mm_sub("gripper/speed_in_mm_sub", &gripperSpeedInMMCallback);
ros::Subscriber<std_msgs::Float64> gripper_position_in_mm_sub("gripper/position_in_mm_sub", &gripperPositionInMMCallback);

// ===============================

void driverParamInit()
{
  driver.toff(4);
  driver.blank_time(24);
  driver.rms_current(1000);    // mA max 1.5
  driver.I_scale_analog(true); // true: Use voltage supplied to VREF as current reference
  driver.microsteps(0);        // up to 256 or 1/256
  driver.TCOOLTHRS(0xFFFFF);   // 20bit max
  driver.semin(5);             // 5
  driver.semax(2);
  driver.sedn(0b01);
  driver.pdn_disable(true);   // true: PDN_UART input function disabled. Set this bit, when using the UART interface
  driver.pwm_autoscale(true); // Needed for stealthChop
  // driver.mres(128);
}

void driverCheckConnection()
{
  nh.loginfo("Testing tmc2209-arduino connection...");
  uint8_t connection_result = driver.test_connection();

  if (connection_result)
  {
    nh.loginfo("connection failed");

    switch (connection_result)
    {
    case 1:
      nh.loginfo("Cause: loose connection");
      break;
    case 2:
      nh.loginfo("Cause: no power");
      break;
    }

    nh.loginfo("Fix the problem and reset board.");
    abort();
  }
  nh.loginfo("tmc2209-arduino connection is OK");
}

void init_stepper()
{
  // set pin mode
  pinMode(EN_PIN, OUTPUT);
  pinMode(STEP_PIN, OUTPUT);
  pinMode(DIR_PIN, OUTPUT);
  pinMode(BUILTIN_LED_PIN, OUTPUT);

  // pinMode(SERIAL_PORT_TX, OUTPUT);
  // pinMode(SERIAL_PORT_RX, INPUT);

  digitalWrite(EN_PIN, LOW);// low-output, high-will not output

  // driver
  driver.begin();
  driverParamInit();
  driverCheckConnection();

  // stepper
  stepper.connectToPins(STEP_PIN, DIR_PIN);

  // homing (initial stepper value inside homing)


  // set final speed of motor
  stepper.setSpeedInStepsPerSecond(1000);
  stepper.setSpeedInMillimetersPerSecond(25);
  stepper.setAccelerationInStepsPerSecondPerSecond(200);

  stepper.setCurrentPositionInSteps(0);
  stepper.setCurrentPositionInMillimeters(0);
  stepper.setupMoveInMillimeters(0);
  stepper.setupMoveInSteps(0);

  delay(5);


}

void setup()
{
  // setup function run once
  Serial.begin(BAUDRATE);
  while (!Serial);
  

  nh.getHardware()->setBaud(BAUDRATE);
  nh.initNode();
  nh.loginfo("Node connected");
  nh.subscribe(gripper_speed_in_mm_sub);
  nh.subscribe(gripper_position_in_mm_sub);

  SERIAL_PORT.begin(BAUDRATE);
  

  init_stepper();
}

uint32_t previous_time = 0;

void loop() {
  // runs forever
  uint32_t current_time = millis();
  // time event
  if ((current_time - previous_time) > RATE) { // repeated every 100 ms
    previous_time = current_time;
    // publish something every period of time
    // nh.loginfo("time event loop excecuted");
  }

  stepper.processMovement(); // makes motor rotate
  nh.spinOnce(); // update callback
}
